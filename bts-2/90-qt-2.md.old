# Qt - Premier projet

## Cr√©ation d‚Äôun projet

!!! warning ""

    Les captures ont √©t√© r√©alis√©es avec **diff√©rentes versions** de Qt Creator, des libell√©s peuvent diff√©rer de ce que vous voyez √† l'√©cran.

1. Cliquer sur : **Fichier > Nouveau fichier ou projet**
    
    ![qt-1](../images/cours/bts-2/90/qt-1.png)
    
2. S√©lectionner **Application (Qt)** puis **Qt Widgets Application** et cliquer sur **Choisir‚Ä¶**
    
    ![qt-2](../images/cours/bts-2/90/qt-2.png)
    
3. Sur la page **Emplacement/Location** donner un nom au projet et s√©lectionner le chemin du projet (au choix) les r√©pertoires sont √† cr√©er s‚Äôils n'existent pas. Cliquer sur **Suivant**.
    
    ![qt-3](../images/cours/bts-2/90/qt-3.png)
    
4. Sur la page **Syst√®me de compilation/Build System**, choisir le syst√®me **qmake**. Cliquer sur **Suivant**.

    ![qt-23](../images/cours/bts-2/90/qt-24.png)
    
5. Sur la page **D√©tails/Details**, laisser le nom par d√©faut de la fen√™tre principale `MainWindow`. Cliquer sur **Suivant**.

    ![qt-23](../images/cours/bts-2/90/qt-25.png)
    
6. Sur la page **Traduction/Translation**, laisser les valeurs par d√©faut. Cliquer sur **Suivant**.

    ![qt-23](../images/cours/bts-2/90/qt-26.png)
    
7. Sur la page **Kits/Kits**, s√©lectionner les cibles pour lesquelles vous souhaitez cr√©er le programme. Cliquer sur **Suivant**.

    ![qt-23](../images/cours/bts-2/90/qt-27.png)
    
8. Sur la page **R√©sum√©/Summary**, laisser les valeurs par d√©faut. Cliquer sur **Terminer**.

    ![qt-23](../images/cours/bts-2/90/qt-28.png)

9. Appuyer sur la fl√®che verte en bas √† gauche.
    
    ![qt-4](../images/cours/bts-2/90/qt-4.png)
    
10. Le programme se lance, la fen√™tre est vide.
    
    ![qt-5](../images/cours/bts-2/90/qt-5.png)

üëç Votre projet est pr√™t pour le d√©veloppement !

## Les fichiers

![Qt #2](../pdf/cours/bts2/bts2_qt_02.pdf)

A tout moment, utiliser la touche ++f1++ pour avoir de l‚Äôaide sur les classes des widgets et des classes Qt (la documentation est disponible sur [https://doc.qt.io/](https://doc.qt.io/)).

### `main.cpp`

```cpp
#include "mainwindow.h"

#include <QApplication>

int main(int argc, char *argv[])
{
    QApplication a(argc, argv); // (1)!
    MainWindow w; // (2)!
    w.show(); // (3)!
    return a.exec(); // (4)!
}
```

1.  Cr√©ation de l'objet qui g√®re l'application.
2.  Cr√©ation de l'objet qui g√®re la fen√™tre principale.
3.  Affichage de la fen√™tre principale.
4.  Lancement de la boucle d'√©v√©nement.

On ne modifie que rarement ce fichier.

### `mainwindow.cpp`

C'est ici que la plupart de vos d√©veloppements vont trouver place.

```cpp
#include "mainwindow.h"
#include "ui_mainwindow.h"

MainWindow::MainWindow(QWidget *parent) : QMainWindow(parent), ui(new Ui::MainWindow)
{
    ui->setupUi(this/* (4)!*/);

    // (1)!
}

MainWindow::~MainWindow()
{
    // (2)!

    delete ui;
}

// (3)!
```

1.  Placer ici tout le code √† ex√©cuter lors du chargement de la fen√™tre... (cr√©ation des widgets, connexions signaux/slots...)
2.  ... et ici lors de la fermeture (suppression des allocations dynamiques, fermeture de connexions aux bases de donn√©es...)
3.  Ici viendront les d√©finitions des slots que vous cr√©erez.
4.  `this` est un pointeur sur l'objet MainWindow.

`ui` est un attribut (donc disponible dans **toute** la classe) qui pointe sur les widgets ajout√©s de la fen√™tre :

![qt-8](../images/cours/bts-2/90/qt-8.png)

## Connexion signal &#8594; slot

![Qt #3](../pdf/cours/bts2/bts2_qt_03.pdf)

1.  Dans la partie projet, double-cliquer sur le fichier `mainwindow.ui`.
    
    ![qt-6](../images/cours/bts-2/90/qt-6.png)
    
2.  Le designer appara√Æt :
    
    ![qt-7](../images/cours/bts-2/90/qt-7.png)
    
3.  Pour ajouter un bouton sur la fen√™tre, faire un glisser-d√©poser du widget de la liste des widgets vers l'aper√ßu de la fen√™tre.
    
    ![qt-9](../images/cours/bts-2/90/qt-9.png)
    
### üß∏ Connexion via le designer

Nous allons connecter le clic sur le bouton que nous venons de poser √† la fermeture de la fen√™tre.  

Le signal `QPushButton::clicked()` et le slot `QMainWindow::close()` sont deux √©l√©ments natifs du framework (que nous n'avons pas √† d√©velopper).

1.  Passer en mode slots ( ++f4++ ).

    ![qt-29](../images/cours/bts-2/90/qt-29.png)

2.  Cliquer sur le widget √† l'origine du signal (le bouton) et, tout en maintenant le clic, d√©placer le curseur vers la cible propri√©taire du slot √† d√©clencher (la fen√™tre). 

    ![qt-30](../images/cours/bts-2/90/qt-30.png)

3.  La liste des signaux et slots s'affiche. 

    Cliquer sur la case √† cocher **Afficher les signaux et slots h√©rit√©s de QWidget**.
    
    ![qt-10](../images/cours/bts-2/90/qt-10.png)
    
4.  Choisir le signal et le slot √† connecter, ici, on choisit :

    + `clicked()` dans la liste de gauche,
    
    + `close()` dans la liste de droite.
    
    ![qt-11](../images/cours/bts-2/90/qt-11.png)
    
5.  Valider et visualiser le r√©sultat graphique.
    
    ![qt-12](../images/cours/bts-2/90/qt-12.png)
    
6.  R√©sultat : un clic sur le bouton ferme la fen√™tre.

    Tester en lan√ßant l‚Äôapplication en appuyant sur la fl√®che verte en bas √† gauche.
    
    ![qt-13](../images/cours/bts-2/90/qt-13.png)

### üéñÔ∏è Connexion via le code
    
On peut aussi associer un signal √† un slot via le code.

C'est le mode op√©ratoire **√† privil√©gier** car il permet de centraliser les connexions dans le code et d'ainsi mieux les g√©rer.

![Qt #4](../pdf/cours/bts2/bts2_qt_04.pdf)

Nous allons connecter le clic sur un nouveau bouton √† l'agrandissement de la fen√™tre : le signal `QPushButton::clicked()` et le slot `QMainWindow::showMaximized()`

1.  Ajouter un nouveau bouton via le designer

2.  Renommer l'objet en `bouton_2` en modifiant son `objectName` dans l'√©diteur de propri√©t√© ou en double-cliquant dessus dans l'inspecteur d'objets.

    ![qt-32](../images/cours/bts-2/90/qt-32.png)

3.  Changer son libell√© en `Bouton 2` en modifiant son `text` dans l'√©diteur de propri√©t√© ou en double-cliquant dessus dans l'aper√ßu de la fen√™tre.

    ![qt-33](../images/cours/bts-2/90/qt-33.png)

4.  Sauvegarder le fichier mainwindow.ui.

5.  Ouvrir le fichier mainwindow.cpp.

6.  Dans le constructeur, apr√®s l'instruction `ui->setupUi(this);`, ajouter la ligne suivante :

    ```cpp
    connect(
        ui->bouton_2/*(1)!*/, 
        SIGNAL(clicked(bool))/*(2)!*/, 
        this/*(3)!*/, 
        SLOT(showMaximized())/*(4)!*/
    );
    ```

    1.  Un pointeur vers l'objet qui envoie le signal : `ui->bouton_2`
    2.  Le prototype du signal en param√®tre de la macro `SIGNAL()` : `SIGNAL(clicked(bool))`
    3.  Un pointeur vers l'objet qui contient le slot : `this` (la MainWindow)
    4.  Le prototype du slot en param√®tre de la macro `SLOT()` : `SLOT(showMaximized())`

    ??? warning "`ui->bouton_2` n'est pas propos√© par l'auto-compl√©tion ?"

        Il peut arriver que les widgets tout juste ajout√©s n'apparaissent pas en auto-compl√©tion :

        ![qt-34](../images/cours/bts-2/90/qt-34.png)

        Veillez √† bien sauvegarder tous les fichiers puis lancer une compilation (build) en cliquant sur le bouton avec le marteau pour rafra√Æchir Qt Creator.

        ![qt-35](../images/cours/bts-2/90/qt-35.png)

7. Sauvegarder et tester.

### ‚ö†Ô∏è Connexion via "Aller au slot"

Vous noterez peut-√™tre qu'il est possible de d√©clarer un slot, le connecter √† un signal et le d√©finir en une seule action ü§© via le clic-droit sur un widget puis **Aller au slot...**.

Elle est not√©e comme obsol√®te (deprecated) dans les derni√®res versions de Qt et ne sera donc bient√¥t **plus support√©e** (un programme utilisant cette fonctionnalit√© devra √™tre red√©velopp√© avant de le mettre √† jour).

Vous pouvez donc utiliser cette fonctionnalit√© pour un prototypage rapide, mais c'est tout... üò≠

![qt-14](../images/cours/bts-2/90/qt-14.png)

![qt-15](../images/cours/bts-2/90/qt-15.png)
    
## D√©boguer

Pour mettre des traces dans votre programme vous pouvez utiliser `qDebug()`.

`qDebug()` est une fonction mais s‚Äôutilise comme cout.

Les messages soumis √† `qDebug()` s'affichent dans le terminal visible dans l'onglet **Sortie de l'application**.
    
```cpp
#include <QDebug>

...

qDebug() << "Je suis pass√© par ici";
```

![qt-31](../images/cours/bts-2/90/qt-31.png)
