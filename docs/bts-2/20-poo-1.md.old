# 02 - Premiers pas en POO

## Cours

![Introduction à la POO](../pdf/cours/bts2/bts2_02_introduction-a-la-poo.pdf)

## Exercice 1

Déclarer en C++ la classe correspondant au diagramme suivant :

![IntRange](../images/cours/bts-2/20/IntRange.png)
    
??? success "Correction"

    ```cpp
    // Fichier IntRange.hpp

    #ifndef IntRange_H
    #define IntRange_H
    class IntRange {
        private :
            int value;
            int min;
            int max;
        public :
            void initialiser();
            void initialiser(int _min, int _max);
            void initialiser(int _min, int _max, int _value);
            int getValue();
        private :
            void setValue(int);
    };
    #endif
    ```


## Exercice 2

Compléter la classe C++ suivante :

```cpp
______ DataBase {
    _______ :
        string server;
        int port;
        string login;
        ______ password;
        string name;
    public :
        void init(string _server, int _port, string _login, string _password);
        string getIp();
        ______ getPort();
        string getLogin();
        string getName();
        void setName(______ _name);
        string getConnectionString();
        bool connect();
        bool check();
};

```

Définir en C++ à l’extérieur de la classe les méthodes `getName()` et `setName()`.

??? success "Correction"

    ```cpp
    // Fichier DataBase.hpp

    #ifndef DataBase_H
    #define DataBase_H

    #include <string>

    using namespace std;

    class DataBase {
        private :
            string server;
            int port;
            string login;
            string password;
            string name;
        public :
            void init(string _server, int _port, string _login, string _password);
            string getIp();
            int getPort();
            string getLogin();
            string getName();
            void setName(string _name);
            string getConnectionString();
            bool connect();
            bool check();
    };

    #endif
    ```

    ```cpp
    // Fichier DataBase.cpp

    #include "DataBase.hpp"

    string DataBase::getName() {
        return name;
    }

    void DataBase::setName(string _name) {
        name = _name;
    }
    ```

## Exercice 3

Dessiner le diagramme correspondant à la classe C++ suivante dans [Visual Paradigm](https://online.visual-paradigm.com/login.jsp){:target="_blank"} :

```cpp
class Connexion {
    private :
        string ip;
        int port;
    public :
        void initialiser(string _ip, string port);
        string getIp();
        int getPort();
        void connecter();
}
```

??? success "Correction"

    ![Correction Connexion](../images/cours/bts-2/20/Connexion.png)

## Exercice 4

Corriger dans [Visual Paradigm](https://online.visual-paradigm.com/login.jsp){:target="_blank"} la classe suivante pour qu'elle respecte l'encapsulation :

![Connexion](../images/cours/bts-2/20/Personne.png)

??? success "Correction"

    ![Correction Personne](../images/cours/bts-2/20/Personne-correction.png)

    La date d'anniversaire n'étant pas une donnée qui peut être modifiée, on pourra discuter de l'utilité du mutateur de birthday.

## Exercice 5

On souhaite générer une classe représentant un compteur. Celui-ci est composé d'une valeur entière positive ou nulle, nulle à l'origine. Il ne peut varier que par pas de 1 (incrémentation ou décrémentation). Décrémenter un compteur nul est sans effet.

1. Commencer par un diagramme de classe

2. Ecrire la classe Counter dans deux fichiers, un pour la déclaration (Counter.h) et un pour la définition (Counter.cpp)

3. Ecrire un programme de test (exo5.cpp)

??? note "Compiler plusieurs fichiers"

    Créer les fichiers dans un même répertoire, puis les compiler avec la commande : 

    ```
    > g++ *.cpp -o exo_5.exe
    ```

??? success "Correction"

    Le diagramme de classe :

    ![Counter](../images/cours/bts-2/20/Counter.png)

    Fichier Counter.h :

    ```cpp
    #ifndef COUNTER_H
    #define COUNTER_H

    class Counter {
        
        unsigned char value; // Pour les tests
        
        public :
            Counter();
            void increment();
            void decrement();
            void reset();
            unsigned char getValue();
    };

    #endif
    ```

    Fichier Counter.cpp :

    ```cpp
    #include "Counter.h"
    #include <limits.h>

    Counter::Counter()
    {
        value = 0;
    }

    void Counter::increment()
    {
        // On ne dépasse pas la limite maximale
        if (value < UCHAR_MAX) { 
            value++;
        }
    }

    void Counter::decrement()
    {
        // On ne descend pas en-dessous de 0
        if (value > 0) { 
            value--;
        }
    }

    void Counter::reset()
    {
        value = 0;
    }

    unsigned char Counter::getValue()
    {
        return value;
    }
    ```

    Fichier exo5.cpp :

    ```cpp
    #include <iostream>
    #include "Counter.h"

    using namespace std;

    int main() {
        
        Counter c1, c2;

        // On attend : 0 et 0
        cout << "c1 : " << +c1.getValue() << endl;
        cout << "c2 : " << +c2.getValue() << endl;

        c1.increment();
        c2.decrement();
        // On attend : 1 et 0
        cout << "c1 : " << +c1.getValue() << endl;
        cout << "c2 : " << +c2.getValue() << endl;

        for (int i = 0; i < 1000; i++) {
            c1.increment();
            if (i % 5 == 0) {
                c2.increment();
            }
        }
        // On attend : 255 et 200
        cout << "c1 : " << +c1.getValue() << endl;
        cout << "c2 : " << +c2.getValue() << endl;

        c1.reset();
        // On attend : 0
        cout << "c1 : " << +c1.getValue() << endl;

        return 0;
    }
    ```

## Exercice 6

On veut écrire une classe Television comprenant les données membres suivantes :

- status ("On"/"Off")
- volume (0 <-> 50)
    - Le volume ne peut pas aller au-delà des limites.
- channel (1 <-> 100)
    - Les chaînes bouclent.

Le but est d’encapsuler dans une classe des méthodes permettant de manipuler un objet `Television`.

A la création, l’objet `Television` est éteint avec le volume à 0 et sur la chaîne 1.

1. Définir les méthodes que vous devez implémenter dans votre classe (mettez vous en situation d’utilisateur de la classe, les méthodes doivent être pratiques et avoir un nom explicite).

2. Représenter la classe en UML.

3. Ecrire le code de ces méthodes. La déclaration et la définition de la classe (fonctions membres) seront dans des fichiers séparés (Television.h et Television.cpp).

??? success "Correction"

    ![Television](../images/cours/bts-2/20/Television.png)

    ```cpp
    // Television.h
    #ifndef TELEVISION_H
    #define TELEVISION_H

    #include <string>

    using namespace std;

    class Television {
        private :
            bool status;
            int volume;
            int channel;
            void reset();

        public :
            Television();
            void start();
            void stop();
            void channelUp();
            void channelDown();
            void volumeUp();
            void volumeDown();
            string display();
    };

    #endif
    ```

    ```cpp
    // Television.cpp
    #include "Television.h"
    #include <iostream>

    using namespace std;

    Television::Television() {
        reset();
    }

    void Television::start() {
        status = true;
    }

    void Television::stop() {
        reset();
    }

    void Television::reset() {
        status = false;
        channel = 1;
        volume = 0;
    }

    void Television::channelUp() {
        if (status) {
            if (channel < 100) {
                channel++;
            }
            else {
                channel = 1;
            }
        }
    }

    void Television::channelDown() {
        if (status) {
            if (channel > 1) {
                channel--;
            }
            else {
                channel = 100;
            }
        }
    }

    void Television::volumeUp() {
        if (status) {
            if (volume < 50) {
                volume++;
            }
        }
    }

    void Television::volumeDown() {
        if (status) {
            if (volume > 0) {
                volume--;
            }
        }
    }

    std::string Television::display() {
        string display = "[TV] ";
        if (status) {
            display += " status : ";
            display += status ? "on" : "off";
            display += " | volume : " + to_string(volume);
            display += " | channel : " + to_string(channel);
        }
        display += "\n";
        return display;
    }
    ```

    ```cpp
    // exo6.cpp
    #include <iostream>
    #include "Television.h"

    using namespace std;

    int main() {

        Television tv;

        cout << tv.display();
        tv.channelUp();
        tv.volumeUp();
        cout << tv.display();
        tv.start();
        tv.channelUp();
        tv.volumeUp();
        tv.volumeUp();
        tv.volumeUp();
        cout << tv.display();
        tv.stop();
        cout << tv.display();
    }
    ```

## Exercice 7

Ecrire une classe Fraction :

- Cette classe contient un numérateur et un dénominateur dont les valeurs par défaut sont égale à 1.

- On pourra instancier un objet Fraction en spécifiant numérateur et dénominateur ou en ne spécifiant que le numérateur.

- On pourra afficher la Fraction sous la forme numérateur/dénominateur.

- On mettra en place les accesseurs nécessaires.

- On pourra additionner deux objets Fraction et obtenir le résultat sous la forme d'un troisième objet Fraction.

Votre mission :

1. Représenter la classe en UML.

2. Ecrire le code de la classe dans des fichiers séparés et un programme de démonstration.

??? danger "Aller plus loin"

    Simplifier la fraction obtenue lors de l'addition.

??? tip "Indice"

    $$
    \frac{a}{b}+\frac{c}{d}=\frac{a*d+c*b }{b*d}
    $$

??? success "Correction"

    ![Fraction](../images/cours/bts-2/20/Fraction.png)

    ```cpp
    // Fraction.h
    #ifndef FRACTION_H
    #define FRACTION_H

    class Fraction {
        private :
            int numerateur;
            int denominateur;
            void simplifier();
        public :
            Fraction();
            Fraction(int _numerateur);
            Fraction(int _numerateur, int _denominateur);
            void display();
            Fraction additionner(Fraction _f);
    };

    #endif
    ```

    ```cpp
    // Fraction.cpp
    #include "Fraction.h"
    #include <iostream>

    Fraction::Fraction() {
        numerateur = 1;
        denominateur = 1;
    }

    Fraction::Fraction(int _numerateur) {
        numerateur = _numerateur;
        denominateur = 1;
    }

    Fraction::Fraction(int _numerateur, int _denominateur) {
        numerateur = _numerateur;
        denominateur = _denominateur;
    }

    void Fraction::display() {
        std::cout << numerateur << "/" << denominateur;
    }

    Fraction Fraction::additionner(Fraction _f) {
        Fraction somme;
        somme.numerateur = numerateur * _f.denominateur + denominateur * _f.numerateur;
        somme.denominateur = denominateur * _f.denominateur;
        somme.simplifier();
        return somme;
    }

    // Pour aller plus loin
    void Fraction::simplifier() {
        int a = numerateur, b = denominateur, c;

        // Calcul du PGCD avec l'algorithme d'Euclide
        while(b) {
            c = a % b;
            a = b;
            b = c;
        }

        numerateur = numerateur / a;
        denominateur = denominateur / a;
    }
    ```

    ```cpp
    // exo7.cpp
    #include <iostream>
    #include "Fraction.h"

    using namespace std;

    int main() {
        Fraction f1(27, 126), f2(1, 2), f3;

        f3 = f1.additionner(f2);
        
        f1.display();
        cout << " + ";
        f2.display();
        cout << " = ";
        f3.display();
        cout << endl;

        return 0;
    }
    ```

## Exercice 8

Modifier le fichier Sailor.cpp pour que le programme suivant affiche  :

```
> ./exo8.exe
nom : noname
nom : paul
nom : eric
nom : fred
nom : xavier
nombre de Sailors : 5
```

```cpp
// Sailor.h
#ifndef SAILOR_H
#define SAILOR_H

#include <string>

class Sailor {
    private :
        std::string name;
        static int sailorsCount;
    public :
        Sailor(std::string);
        Sailor();
        ~Sailor();
        int getSailorsCount();
        void setName(std::string);
        void display();
};

#endif
```

```cpp
// Sailor.cpp
#include "Sailor.h"

...
```

```cpp
// exo8.cpp
#include <iostream>
#include "Sailor.h"

int main() {
    Sailor sailor1;
    Sailor sailor2("paul");
    Sailor bateau1[3];

    sailor1.display();
    sailor2.display();

    bateau1[0].setName("eric");
    bateau1[1].setName("fred");
    bateau1[2].setName("xavier");

    for (int i = 0; i < 3; i++) {
        bateau1[i].display();
    }

    std::cout << "nombre de sailors : " << sailor1.getSailorsCount();

    return 0;
}
```

??? success "Correction"

    ![Please wait...](../images/meme/waiting-zootopia.gif)

## Exercice 9

Créer une classe `Tab` permettant de créer des tableaux de taille dynamique.

Commencer par un diagramme de classe.

Prévoir toutes les méthodes utiles.