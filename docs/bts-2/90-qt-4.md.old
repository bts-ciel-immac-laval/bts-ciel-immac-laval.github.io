# Projet Pok√©dex 2.0

## Le besoin

Ce projet a pour objectif de r√©aliser un Pok√©dex en utilisant le framework Qt. 

Le projet √† r√©aliser doit prendre l'apparence suivante :

![Pok√©dex 2.0](../images/cours/bts-2/90/pookedex/pokedex_full.jpg)

Un Pok√©dex est un appareil qui accompagne tout bon dresseur de Pok√©mon(1) et qui liste les Pok√©mon et leurs informations.
{ .annotate }

1.  :material-pokeball: Pok√©mon est invariable et s'√©crit avec un accent m√™me en anglais.

Notre application √©mulera cet appareil et s‚Äôappuiera sur les webservices du site internet [pokeapi.co](https://pokeapi.co/) pour r√©cup√©rer informations sur les Pok√©mon et leurs images.

## Avancement du projet

+ [x] Recueillir le besoin (oral/questions-r√©ponses/prise de notes)

+ [x] Analyse

    + [x] Travaux pr√©paratoires (√©tude de faisabilit√©, essais)

        + [x] Envoyer une requ√™te HTTP GET et g√©rer la r√©ponse avec Qt

        + [x] Manipuler des informations au format JSON

+ [x] Conception

    + [x] D√©finir les acteurs et les fonctionnalit√©s du syst√®me

        + [x] Sch√©matiser √† l'aide d'un [diagramme de cas d'utilisations](https://lipn.univ-paris13.fr/~gerard/uml-s2/uml-cours04.html)

        + [x] D√©crire les cas d'utilisation

    + [x]  Prendre en compte les contraintes techniques

        + [x] Description du m√©canisme de cache (pokeapi + images)

        + [x] Sch√©matisation de l'impact dans les [diagrammes de s√©quences](https://lipn.univ-paris13.fr/~gerard/uml-s2/uml-cours05.html)

    + [x]  D√©crire l'IHM

        + [x] Cr√©er une maquette de l'IHM

    + [x]  D√©finir l'architecture de l'application

        + [x] Sch√©matisation du diagramme de classes

        + [x] Pr√©cisions sur les m√©thodes

        + [x] Sch√©matisation du diagramme de s√©quence "au plus proche" 

    + [x] R√©daction des sp√©cifications

    + [x] R√©daction du cahier de recette

    + [x] R√©partition des r√¥les/Planification

    + [ ] Pr√©sentation de la solution

+ [x] D√©veloppement

    + [ ] R√©daction des tests unitaires

    + [ ] Codage

        + [ ] Passage des tests unitaires

    + [ ] Int√©gration

+ [ ] Recette

    + [ ] Passage des tests de recette

    + [ ] Correction

+ [ ] Livraison

## Fichiers du projet

<div class="grid grid-3 cards" markdown>

-   :material-image:{ .lg .middle } __Maquette initiale__

    ---

    ![Maquette initiale](../images/cours/bts-2/90/pookedex/pokedex_full.jpg)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/pokedex_full.jpg)

-   :material-image:{ .lg .middle } __Maquette vide__

    ---

    ![Maquette vide](../images/cours/bts-2/90/pookedex/pokedex_bg.png)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/pokedex_bg.png)

-   :material-image:{ .lg .middle } __Icone__

    ---

    ![Icone](../images/cours/bts-2/90/pookedex/pokedex_icon.png)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/pokedex_icon.ico)

-   :material-image:{ .lg .middle } __Chaines d'√©volutions__

    ---

    ![Chaines d'√©volutions](../images/cours/bts-2/90/pookedex/pokemon_chains.png)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/pokemon_chains.png)

-   :material-human-male-board:{ .lg .middle } __Diagramme de s√©quence macro__

    ---

    ![Sequence 1](../images/cours/bts-2/90/pookedex/tableau_diagramme_sequence_macro.jpg)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/tableau_diagramme_sequence_macro.jpg)

-   :material-human-male-board:{ .lg .middle } __Options de cache__

    ---

    ![Options de cache](../images/cours/bts-2/90/pookedex/tableau_options_cache.jpg)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/tableau_options_cache.jpg)

-   :material-human-male-board:{ .lg .middle } __Choix cache et webservices__

    ---

    ![Webservices et cache](../images/cours/bts-2/90/pookedex/tableau_webservices_cache.jpg)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/tableau_webservices_cache.jpg)

-   :material-human-male-board:{ .lg .middle } __Diagramme de classes__

    ---

    ![Classes](../images/cours/bts-2/90/pookedex/tableau_diagramme_classes.jpg)

    [:octicons-download-16: T√©l√©charger](../images/cours/bts-2/90/pookedex/tableau_diagramme_classes.jpg)

-   :octicons-file-16:{ .lg .middle } __Cahier de tests__

    ---

    ![recette](../images/cours/bts-2/90/pookedex/cahier-tests.png)

    [:octicons-download-16: T√©l√©charger](../files/bts2/bts2_modele_recette.xlsx)

</div>

## Analyse

### Travaux pr√©paratoires

Pok√©API propose des webservices [REST]("REpresentational State Transfer") permettant de r√©cup√©rer des informations sur les Pok√©mon.

Pour les utiliser, nous devons ma√Ætriser deux techniques avec Qt :

+   [ ] Envoyer une requ√™te HTTP GET et g√©rer la r√©ponse

+   [ ] Manipuler des informations au format [JSON]("JavaScript Object Notation")

#### Envoyer une requ√™te HTTP GET et g√©rer la r√©ponse

1.  Ajouter le module Network au projet Qt en ajoutant la ligne suivante au d√©but du fichier `.pro`¬†:

    ```cpp
    QT += network
    ```

2.  Pour g√©rer les requ√™tes HTTP, on utilisera un objet **unique** `QNetworkAccessManager` ajout√© en attribut de la fen√™tre.

    Cet objet contient une [m√©thode](https://doc.qt.io/qt-5/qnetworkaccessmanager.html#get) `QNetworkReply * get(QNetworkRequest(QUrl("url √† requ√™ter")))` qui permet d‚Äôenvoyer une requ√™te HTTP de type GET.

    On sauvera l'adresse de l'objet `QNetworkReply` renvoy√©e par la m√©thode dans un attribut `QNetworkReply *` de la fen√™tre.

    Ajouter les attributs suivants √† la classe `MainWindow` :

    ```cpp
    QNetworkAccessManager * qnam;
    QNetworkReply * qnr;
    ```

    Dans le constructeur de la `MainWindow`, affecter un nouvel objet `QNetworkAccessManager` √† `qnam` et `nullptr` √† `qnr` (l'objet `qnr` sera renouvel√© √† chaque nouvelle requ√™te).

    D√©truire `qnam` et `qnr` lorsque le programme s'arr√™te.

3.  Ajouter un bouton dans la fen√™tre qui permettra de d√©clencher l'envoi de la requ√™te.

4.  Connecter le clic du bouton √† un nouveau slot `launchHTTPRequest`.

    Dans la d√©finition du slot `launchHTTPRequest` appeler la m√©thode `get()` de `qnam` sur l'url `https://pokeapi.co/api/v2/pokemon/25` et stocker le r√©sultat dans `qnr`.
    
5.  La requ√™te HTTP est lanc√©e de mani√®re asynchrone(1). 
    { .annotate }

    1.  :material-pokeball: La requ√™te est lanc√©e en arri√®re-plan, dans un autre thread, elle ne bloque pas l'ex√©cution du thread courant et donc l'application.

    Quand la r√©ponse du serveur (quelle qu'elle soit) est compl√©tement re√ßue, l'objet `QNetworkReply` √©met un signal `finished()`.

    Connecter un nouveau slot `manageHTTPAnswer` √† ce signal juste apr√®s l'appel de la m√©thode `get()` de `qnam`.

    En effet, un nouvel objet `QNetworkReply` est cr√©√© √† chaque appel de `get`, `qnr` change donc d'adresse et il faut donc cr√©er une nouvelle connexion.

6.  Dans la d√©finition du slot `manageHTTPAnswer`, afficher dans la console le contenu du corps de la r√©ponse en appelant la m√©thode `readAll()` de `qnr`.

7.  Tester.

    Si tout se passe bien, la console doit √™tre remplie 

    ```json
    {"abilities":[{"ability":{"name":"static","url":"https://pokeapi.co/api/v2/ability/9/"},"is_hidden":false,"slot":1},{"ability":{"name":"lightning-rod","url":"https://pokeapi.co/api/v2/ability/31/"},"is_hidden":true,"slot":3}],"base_experience":112,"cries":{"latest":"https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/25.ogg","legacy":"https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/legacy/25.ogg"},...
    ```

Am√©liorer le script :

+   [ ] D√©connecter l'objet point√© par `qnr` de `manageHTTPAnswer` et le supprimer avant l'appel de la m√©thode `get()`.

+   [ ] G√©rer les erreurs HTTP en connectant le signal QNetworkReply::errorOccurred √† un nouveau slot `manageHTTPErrors`.

#### Manipuler des informations au format JSON

1.  Ajouter un bouton dans la fen√™tre qui permettra de d√©clencher la lecture du JSON.

2.  Connecter le clic du bouton √† un nouveau slot `readJSON`.

    Dans la d√©finition du slot `readJSON`, nous allons cr√©er un objet `QJsonObject` √† partir du contenu JSON suivant :

    ```json
    {
        "FirstName": "John",
        "LastName": "Doe",
        "Age": 43,
        "Address": {
            "Street": "Downing Street 10",
            "City": "London",
            "Country": "Great Britain"
        },
        "Phone numbers": [
            "+44 1234567",
            "+44 2345678"
        ]
    }
    ```

    Le code permettant de r√©aliser cela est le suivant :

    ```cpp
    QByteArray data("Donn√©es au format JSON");
    QJsonDocument doc = QJsonDocument::fromJson(data);
    QJsonObject json = doc.object();
    ```

    Utiliser Notepad++ pour : 
        
    +   mettre les donn√©es JSON sur une ligne, 
    
    +   supprimer les doubles espaces,
    
    +   √©chapper les guillemets doubles.
    
    Int√©grer le r√©sultat au code ci-dessus dans le slot `readJSON`.

3.  Pour acc√©der √† une valeur, la m√©thode la plus **s√ªre** est de r√©aliser la petite gymnastique suivante :

    1. v√©rifier que le champ/attribut existe,

    2. v√©rifier qu'il est bien du type attendu (int, string, array, object...),

    3. r√©cup√©rer sa valeur.

    Et r√©p√©ter cela pour chaque niveau "hi√©rarchique"... üò•

    Afficher le pr√©nom √† l'aide du code suivant :

    ```cpp
    if (json.contains("FirstName") && json["FirstName"].isString()) {
        qDebug() << json["FirstName"].toString();
    }
    ```

4. Tester.

5. Afficher dans la console "John Doe (43), London" √† l'aide des informations extraites des donn√©es JSON.

Am√©liorer le script :

+   [ ] Cr√©er une classe d√©riv√©e de QJsonObject et surd√©finir la m√©thode `value()` pour qu'elle l√®ve une exception en cas d'erreur (et s'√©viter la petite gymnastique üòÖ).

#### Combiner les deux techniques

En combinant les deux techniques, cr√©er une mini-application qui nous affiche le nom en fran√ßais d'un Pok√©mon dont on lui soumet le num√©ro.

![Pok√©dex v0](../images/cours/bts-2/90/pookedex/pokedex-02.png)

Solution : [pokedex_2024.zip](../files/bts2/pokedex_2024.zip)